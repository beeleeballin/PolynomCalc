#BlueJ class context
comment0.target=FSM
comment0.text=\n\ A\ string-to-token\ parser\ class\ that\ employs\ the\ methodology\ of\ a\ finite\ state\ machine\n\ The\ class\ takes\ no\ parameters\ upon\ instantiation,\n\ but\ its\ primary\ method,\ parsePoly(),\ takes\ in\ a\ string\ and\ a\ memory\ to\ \n\ convert\ the\ string\ into\ a\ list\ of\ Tokens,\ and\ to\n\ access\ the\ stored\ objects\ from\ the\ Polynomial\ class.\n
comment1.params=
comment1.target=FSM()
comment1.text=Constructor
comment2.params=o\ n
comment2.target=double\ dten(double,\ int)
comment2.text=\n\ Helps\ make\ sense\ of\ the\ coefficient\ strings\ so\ the\ polynomials\ could\ be\ instatiated\n\ Realized\ I\ could\ use\ parseDouble()\ in\ the\ Java\ Double\ Class\ later\ on...\ but\ oh\ well\ this\ works\ too\n\ @param\ o\ The\ coefficient\ value\ recorded\ up\ to\ this\ point\n\ @param\ n\ The\ new\ number\ that\ should\ be\ accounted\ for\n\ @return\ The\ updated\ coefficient\ value\n
comment3.params=o\ n\ p
comment3.target=double\ tenth(double,\ int,\ int)
comment3.text=\n\ Helps\ make\ sense\ of\ the\ coefficient\ strings\ so\ the\ polynomials\ could\ be\ instatiated\n\ @param\ o\ The\ exponent\ value\ recorded\ up\ to\ this\ point\n\ @param\ n\ The\ new\ number\ that\ should\ be\ accounted\ for\n\ @return\ The\ updated\ exponent\ value\n
comment4.params=o\ n
comment4.target=int\ iten(int,\ int)
comment4.text=\n\ Helps\ make\ sense\ of\ the\ exponent\ strings\ so\ the\ polynomials\ could\ be\ instatiated\n\ @param\ o\ The\ coefficient\ value\ recorded\ up\ to\ this\ point\n\ @param\ n\ The\ new\ number\ that\ should\ be\ accounted\ for\n\ @return\ The\ updated\ coefficient\ value\n
comment5.params=
comment5.target=void\ resetPolyInput()
comment5.text=\n\ Resets\ the\ accumulators\ needed\ for\ polynomial\ instantiation\n
comment6.params=
comment6.target=char\ getTemp()
comment6.text=\n\ Get\ the\ private\ field\ temp\ which\ stores\ the\ variable\ that\ needs\ a\ new\ associated\ Polynomial\ \n\ @return\ The\ stored\ variable\n
comment7.params=input\ memory
comment7.target=java.util.Deque\ parsePoly(java.lang.String,\ java.util.Map)
comment7.text=\n\ Parses\ an\ string\ expression\ into\ workable\ Tokens\n\ @param\ input\ The\ string\ that\ needs\ to\ be\ parsed\ into\ Tokens\n\ @param\ memory\ The\ memory\ of\ all\ the\ stored\ Polynomials\n\ @return\ The\ input\ string\ in\ Token\ form\n
comment8.params=args
comment8.target=void\ main(java.lang.String[])
comment8.text=Static\ main\ to\ test\ this\ class
numComments=9
